{"version":3,"sources":["serviceWorker.ts","redux/displayInput-reducer.ts","DisplayInput/DisplayInputContainer.ts","DisplayInput/DisplayInput.tsx","localStorage/localStorage.ts","DisplaySpan/DisplaySpanContainer.ts","DisplaySpan/DisplaySpan.tsx","Button/Button.tsx","Button/ButtonSetContainer.ts","Button/ButtonResetContainer.ts","Button/ButtonIncContainer.ts","AppWithRedux.tsx","redux/redux-store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTIONS_TYPE","initialState","start","max","disable","count","text","buttonSetName","buttonSetDisable","buttonResetName","buttonResetDisable","buttonIncName","buttonIncDisable","DisplayInputContainer","connect","state","input","dispatch","changeStart","startValue","type","CHANGE_START","changeMax","maxValue","CHANGE_MAX","setText","textValue","SET_TEXT","setDisable","disableValue","SET_DISABLE","props","useSelector","className","value","onChange","e","currentTarget","key","stateAsString","JSON","stringify","localStorage","setItem","saveState","x","y","DisplaySpanContainer","Button","disabled","onClick","reset","name","ButtonSetContainer","BUTTON_SET","ButtonResetContainer","BUTTON_RESET","ButtonIncContainer","BUTTON_INC","AppWithRedux","useDispatch","useEffect","locStorageState","defaultState","getItem","parse","restoreState","console","log","SET_STORAGE","setValuesFromLoalstorageAC","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1f06d91.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CacheType, restoreState, saveState} from \"../localStorage/localStorage\";\r\nimport {useEffect} from \"react\";\r\n\r\nexport enum ACTIONS_TYPE {\r\n    CHANGE_MAX = 'CHANGE_MAX',\r\n    CHANGE_START = 'CHANGE_START',\r\n    SET_TEXT = 'SET_TEXT',\r\n    SET_DISABLE = 'SET_DISABLE',\r\n    BUTTON_SET = 'BUTTON_SET',\r\n    BUTTON_RESET = 'BUTTON_RESET',\r\n    BUTTON_INC = 'BUTTON_INC',\r\n    SET_STORAGE = 'SET_STORAGE'\r\n}\r\n\r\nexport type DisplayInputStateType = {\r\n    start: number,\r\n    max: number,\r\n    disable: boolean,\r\n    count: number,\r\n    text: string,\r\n    buttonSetName: string,\r\n    buttonSetDisable: boolean,\r\n    buttonResetName: string,\r\n    buttonResetDisable: boolean,\r\n    buttonIncName: string,\r\n    buttonIncDisable: boolean\r\n}\r\n\r\nlet initialState = {\r\n    start: 0,\r\n    max: 1,\r\n    disable: false,\r\n    count: 0,\r\n    text: \"\",\r\n    buttonSetName: \"Set\",\r\n    buttonSetDisable: false,\r\n    buttonResetName: \"Reset\",\r\n    buttonResetDisable: false,\r\n    buttonIncName: \"Inc\",\r\n    buttonIncDisable: true\r\n}\r\nexport const displayInputReducer = (state: DisplayInputStateType = initialState, action: DisplayInputReducersTypes) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_MAX:\r\n            return {\r\n                ...state,\r\n                max: action.max\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_START:\r\n            return {\r\n                ...state,\r\n                start: action.start\r\n            }\r\n\r\n        case ACTIONS_TYPE.SET_TEXT:\r\n            return {\r\n                ...state,\r\n                text: action.text\r\n            }\r\n\r\n        case ACTIONS_TYPE.SET_DISABLE:\r\n            return {\r\n                ...state,\r\n                buttonSetDisable: action.disable\r\n            }\r\n\r\n        case ACTIONS_TYPE.BUTTON_SET:\r\n            return {\r\n                ...state,\r\n                count: state.start,\r\n                text: \"\",\r\n                buttonIncDisable: false\r\n            }\r\n        case ACTIONS_TYPE.BUTTON_RESET:\r\n            return {\r\n                ...state,\r\n                count: 0\r\n            }\r\n\r\n        case ACTIONS_TYPE.BUTTON_INC:\r\n            return {\r\n                ...state,\r\n                count: ++state.count\r\n            }\r\n        case ACTIONS_TYPE.SET_STORAGE:\r\n            return {\r\n                ...state,\r\n                max: action.locStorageState.y,\r\n                start:action.locStorageState.x\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ChangeMaxActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_MAX,\r\n    max: number\r\n}\r\nexport const changeMaxAC = (maxValue: number): ChangeMaxActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_MAX, max: maxValue\r\n    }\r\n}\r\n\r\nexport type ChangeStartActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_START,\r\n    start: number\r\n}\r\nexport const changeStartAC = (startValue: number): ChangeStartActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_START, start: startValue\r\n    }\r\n}\r\n\r\nexport type SetTextActionType = {\r\n    type: ACTIONS_TYPE.SET_TEXT,\r\n    text: string\r\n}\r\nexport const setTextAC = (textValue: string): SetTextActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_TEXT, text: textValue\r\n    }\r\n}\r\n\r\nexport type SetDisableActionType = {\r\n    type: ACTIONS_TYPE.SET_DISABLE,\r\n    disable: boolean\r\n}\r\nexport const setDisableAC = (disableValue: boolean): SetDisableActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_DISABLE, disable: disableValue\r\n    }\r\n}\r\n\r\n\r\nexport type SetActionType = {\r\n    type: ACTIONS_TYPE.BUTTON_SET\r\n}\r\nexport const setAC = (): SetActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.BUTTON_SET\r\n    }\r\n}\r\n\r\nexport type ResetActionType = {\r\n    type: ACTIONS_TYPE.BUTTON_RESET\r\n}\r\nexport const resetAC = (): ResetActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.BUTTON_RESET\r\n    }\r\n}\r\n\r\nexport type IncActionType = {\r\n    type: ACTIONS_TYPE.BUTTON_INC\r\n}\r\nexport const incAC = (): IncActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.BUTTON_INC\r\n    }\r\n}\r\n\r\nexport type setValuesFromLoalstorageActionType = {\r\n    type: ACTIONS_TYPE.SET_STORAGE,\r\n    locStorageState:CacheType\r\n}\r\n\r\nexport const setValuesFromLoalstorageAC = (locStorageState:CacheType): setValuesFromLoalstorageActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_STORAGE,\r\n        locStorageState:locStorageState\r\n    }\r\n}\r\n\r\nexport type DisplayInputReducersTypes =\r\n    ChangeMaxActionType\r\n    | ChangeStartActionType\r\n    | SetActionType\r\n    | ResetActionType\r\n    | IncActionType\r\n    | SetTextActionType\r\n    | SetDisableActionType\r\n    |setValuesFromLoalstorageActionType;","import {AppStateType} from \"../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    changeMaxAC,\r\n    changeStartAC,\r\n    DisplayInputReducersTypes,\r\n    setDisableAC,\r\n    setTextAC\r\n} from \"../redux/displayInput-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {DisplayInput} from \"./DisplayInput\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        start: state.input.start,\r\n        max: state.input.max,\r\n        disable: state.input.disable\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<DisplayInputReducersTypes>) => {\r\n    return {\r\n        changeStart: (start: number) => {\r\n            dispatch(changeStartAC(start));\r\n        },\r\n\r\n        changeMax: (max: number) => {\r\n            dispatch(changeMaxAC(max));\r\n        },\r\n        setText:(text:string) => {\r\n            dispatch(setTextAC(text))\r\n        },\r\n        setDisable:(disable:boolean)=>{\r\n            dispatch(setDisableAC(disable))\r\n        }\r\n    }\r\n}\r\n\r\nconst DisplayInputContainer = connect(mapStateToProps, mapDispatchToProps)(DisplayInput)\r\nexport default DisplayInputContainer","import React, {ChangeEvent, useEffect} from 'react';\r\nimport './DisplayInput.css';\r\nimport {CacheType, restoreState, saveState} from \"../localStorage/localStorage\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {DisplayInputStateType} from \"../redux/displayInput-reducer\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype DisplayInputType = {\r\n    changeMax: (max: number) => void\r\n    changeStart: (start: number) => void\r\n    // disableBtn2: boolean\r\n    disable: boolean\r\n    start: number\r\n    max: number\r\n    setText: (value: string) => void\r\n    // setDisableBtn2: (disableBtn2: boolean) => void\r\n    setDisable: (disable: boolean) => void\r\n}\r\n\r\nexport function DisplayInput(props: DisplayInputType) {\r\n\r\n\r\nconst max = useSelector<AppStateType,number>(state => state.input.max)\r\n    const start = useSelector<AppStateType,number>(state => state.input.start)\r\n\r\n    let onChangeStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        let start = +e.currentTarget.value;\r\n        saveState<CacheType>(\"test\", {x: start, y: max})\r\n        props.changeStart(start);\r\n        props.setText(\"enter values and enter 'set' \")\r\n\r\n        if (start === props.max || props.max < start || start < 0) {\r\n            props.setText('Incorrect Value')\r\n            props.setDisable(true)\r\n        } else {\r\n            props.setDisable(false);\r\n        }\r\n\r\n    }\r\n\r\n    let onChangeMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        props.setText(\"enter values and enter 'set' \")\r\n        let max = +e.currentTarget.value;\r\n        props.changeMax(max);\r\n\r\n        if (props.start === max || max < props.start || max < 0) {\r\n            props.setText('Incorrect Value')\r\n            props.setDisable(true)\r\n        } else {\r\n            props.setDisable(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"displayInput\">\r\n            <div>\r\n                <span>Max Value:</span>\r\n                <input\r\n                    className={props.max === props.start || props.start < 0 || props.start > props.max ? \"redInput\" : \"defaultInput\"}\r\n                    type=\"number\"\r\n                    value={max} onChange={onChangeMax}/>\r\n            </div>\r\n            <div>\r\n                <span>Start Value:</span>\r\n                <input\r\n                    className={props.max === props.start || props.start < 0 || props.start > props.max ? \"redInput\" : \"defaultInput\"}\r\n                    type=\"number\" value={start} onChange={onChangeStart}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}"," export type CacheType = {\r\n    x: number\r\n    y: number\r\n}\r\n\r\n// вот вам функция для сохранения объектов в память браузера\r\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n// saveState<CacheType>(\"test\", x: start, y: max);\r\n\r\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n\r\n","import React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeMaxAC, changeStartAC, DisplayInputReducersTypes} from \"../redux/displayInput-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {DisplaySpan} from \"./DisplaySpan\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        count: state.input.count,\r\n        max: state.input.max,\r\n        text:state.input.text\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<DisplayInputReducersTypes>) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst DisplaySpanContainer = connect(mapStateToProps, mapDispatchToProps)(DisplaySpan)\r\nexport default DisplaySpanContainer","import React from 'react';\r\nimport './DisplaySpan.css';\r\n\r\ntype DisplayType = {\r\n    count: number\r\n    text:string\r\n    max:number\r\n}\r\n\r\nexport function DisplaySpan(props: DisplayType) {\r\n    return (\r\n        <div className=\"displaySpan\">\r\n\r\n            {props.text ?  <span className={props.text[0] ===\"e\" ? \"textNorm\" : \"textRed\"}>{props.text}</span>:<span className={props.count === props.max ? \"red\" : \"main\"}>{props.count}</span>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    disabled: boolean\r\n    reset: () => void\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n\r\n    return <button disabled={props.disabled} onClick={props.reset}>{props.name}</button>\r\n}","import {AppStateType} from \"../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeMaxAC, changeStartAC, DisplayInputReducersTypes, setAC} from \"../redux/displayInput-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button} from \"./Button\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        name: state.input.buttonSetName,\r\n        disabled: state.input.buttonSetDisable,\r\n        max: state.input.max,\r\n        start: state.input.start\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<DisplayInputReducersTypes>) => {\r\n    return {\r\n        reset: () => {\r\n\r\n            dispatch(setAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst ButtonSetContainer = connect(mapStateToProps, mapDispatchToProps)(Button)\r\nexport default ButtonSetContainer","import {AppStateType} from \"../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeMaxAC, changeStartAC, DisplayInputReducersTypes, resetAC, setAC} from \"../redux/displayInput-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button} from \"./Button\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        name: state.input.buttonResetName,\r\n        disabled: state.input.count === 0 || state.input.text !== \"\"\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<DisplayInputReducersTypes>) => {\r\n    return {\r\n        reset: () => {\r\n            dispatch(resetAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst ButtonResetContainer = connect(mapStateToProps, mapDispatchToProps)(Button)\r\nexport default ButtonResetContainer","import {AppStateType} from \"../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeMaxAC, changeStartAC, DisplayInputReducersTypes, incAC, setAC} from \"../redux/displayInput-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button} from \"./Button\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        name: state.input.buttonIncName,\r\n        disabled: state.input.buttonIncDisable || state.input.count === state.input.max || state.input.text !== \"\"\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<DisplayInputReducersTypes>) => {\r\n    return {\r\n        reset: () => {\r\n            dispatch(incAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst ButtonIncContainer = connect(mapStateToProps, mapDispatchToProps)(Button)\r\nexport default ButtonIncContainer","import React, {useEffect, useState} from 'react';\nimport {Button} from \"./Button/Button\";\nimport {DisplayInput} from \"./DisplayInput/DisplayInput\";\nimport {DisplaySpan} from \"./DisplaySpan/DisplaySpan\";\nimport \"./App.css\"\nimport DisplayInputContainer from \"./DisplayInput/DisplayInputContainer\";\nimport DisplaySpanContainer from \"./DisplaySpan/DisplaySpanContainer\";\nimport ButtonSetContainer from \"./Button/ButtonSetContainer\";\nimport ButtonResetContainer from \"./Button/ButtonResetContainer\";\nimport ButtonIncContainer from \"./Button/ButtonIncContainer\";\nimport {CacheType, restoreState} from \"./localStorage/localStorage\";\nimport {useDispatch} from \"react-redux\";\nimport {setValuesFromLoalstorageAC} from \"./redux/displayInput-reducer\";\n\nfunction AppWithRedux() {\n   const dispatch = useDispatch()\nuseEffect(() => {\n    const locStorageState: CacheType = restoreState<CacheType>(\"test\", {x: 0, y: 2});\n    console.log(locStorageState)\n    dispatch(setValuesFromLoalstorageAC(locStorageState))\n\n}, [])\n    return (\n        <div className=\"wrapper\">\n            <div className=\"frame\">\n                <DisplayInputContainer/>\n                <div className=\"button\">\n                    <ButtonSetContainer/>\n                </div>\n            </div>\n\n            <div className=\"frame\">\n                <DisplaySpanContainer/>\n                <div className=\"button\">\n                    <ButtonIncContainer/>\n                    <ButtonResetContainer/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {displayInputReducer} from \"./displayInput-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    input:displayInputReducer\r\n    // span:displaySpanReducer\r\n})\r\n\r\nexport let store:Store = createStore(reducers);\r\n// @ts-ignore\r\nwindow.store = store;\r\n// @ts-ignore\r\nconsole.log(window.store)\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n<Provider store={store}>\n    <AppWithRedux />\n</Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}